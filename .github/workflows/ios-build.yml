name: Resign IPA

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  resign:
    runs-on: macos-latest
    env:
      # Path inside the repo to your unsigned ipa (relative to repo root)
      IPA_INPUT_PATH: ".github/workflows/MyApp.ipa"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare workspace
        run: |
          set -euo pipefail
          WORKDIR="$RUNNER_TEMP/resign_workdir"
          echo "WORKDIR: $WORKDIR"
          rm -rf "$WORKDIR"
          mkdir -p "$WORKDIR"
          echo "Repo top-level files:"
          ls -la "$GITHUB_WORKSPACE" || true

      - name: Decode secrets -> files
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          set -euo pipefail
          WORKDIR="$RUNNER_TEMP/resign_workdir"
          mkdir -p "$WORKDIR"
          printf '%s' "$P12_BASE64" | base64 --decode > "$WORKDIR/cert.p12"
          printf '%s' "$MOBILEPROVISION_BASE64" | base64 --decode > "$WORKDIR/profile.mobileprovision"
          echo "Decoded files:"
          ls -l "$WORKDIR"
          file "$WORKDIR/cert.p12" || true

      - name: Create keychain and import .p12 (make key accessible)
        env:
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          WORKDIR="$RUNNER_TEMP/resign_workdir"
          KEYCHAIN="$RUNNER_TEMP/build.keychain"
          echo "Creating keychain: $KEYCHAIN"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | sed -n 's/^[[:space:]]*"\(.*\)".*$/\1/p') || true
          security default-keychain -s "$KEYCHAIN"
          security import "$WORKDIR/cert.p12" -k "$KEYCHAIN" -P "$P12_PASSWORD" -T /usr/bin/codesign -A
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          echo "Keychain import done. Listing identities:"
          security find-identity -v -p codesigning || true

      - name: Install Apple WWDR intermediate cert (needed to build chain)
        run: |
          set -euo pipefail
          WWDR="/tmp/AppleWWDRCA.cer"
          curl -fsSL -o "$WWDR" "https://developer.apple.com/certificationauthority/AppleWWDRCAG3.cer" || true
          if [ -s "$WWDR" ]; then
            security import "$WWDR" -k "$RUNNER_TEMP/build.keychain" -A || true
            echo "Imported WWDR cert."
          else
            echo "WWDR certificate not downloaded; ensure intermediate cert is available."
          fi
          security find-certificate -a -c "Apple Worldwide Developer Relations" || true

      - name: Resign IPA (unpack, embed profile, sign nested, sign app, repack)
        run: |
          set -euo pipefail
          WORKDIR="$RUNNER_TEMP/resign_workdir"
          cd "$WORKDIR"

          echo "Copying IPA from repo: $GITHUB_WORKSPACE/${IPA_INPUT_PATH}"
          cp "$GITHUB_WORKSPACE/${IPA_INPUT_PATH}" ./app.ipa

          echo "Unpacking app.ipa..."
          unzip -q app.ipa -d MyApp_unpack

          echo "Contents of MyApp_unpack/Payload:"
          ls -la MyApp_unpack/Payload || true

          # find the first .app directory inside Payload (search two levels just in case)
          APP_PATH="$(find MyApp_unpack/Payload -maxdepth 3 -type d -name '*.app' -print -quit || true)"

          if [ -z "$APP_PATH" ]; then
            echo "ERROR: could not find any .app inside the IPA payload."
            echo "Full tree of MyApp_unpack for debugging:"
            find MyApp_unpack -type f -maxdepth 6 -print || true
            exit 1
          fi

          echo "App path: $APP_PATH"

          # embed provisioning profile (must match bundle ID)
          cp "$WORKDIR/profile.mobileprovision" "$APP_PATH/embedded.mobileprovision"
          echo "Embedded provisioning profile."

          # extract entitlements from the provisioning profile
          security cms -D -i "$WORKDIR/profile.mobileprovision" > profile.plist
          /usr/libexec/PlistBuddy -x -c 'Print :Entitlements' profile.plist > Entitlements.plist || true
          echo "Entitlements written to: $(pwd)/Entitlements.plist"

          # remove extended attributes
          xattr -cr "$APP_PATH" || true

          # choose identity
          IDENTITY="$(security find-identity -v -p codesigning | sed -n 's/.*\"\(Apple Distribution:.*\)\".*/\1/p' | head -n1)"
          if [ -z "$IDENTITY" ]; then
            echo "ERROR: no Apple Distribution identity found in keychain"; exit 1
          fi
          echo "Using signing identity: $IDENTITY"

          # sign nested code
          find "$APP_PATH" -type d -name "*.framework" -print0 | while IFS= read -r -d '' F; do
            echo "  Signing framework: $F"
            codesign --force --sign "$IDENTITY" --entitlements Entitlements.plist --options runtime --timestamp=none "$F" || true
          done

          find "$APP_PATH" -type f -name "*.dylib" -print0 | while IFS= read -r -d '' D; do
            echo "  Signing dylib: $D"
            codesign --force --sign "$IDENTITY" --entitlements Entitlements.plist --options runtime --timestamp=none "$D" || true
          done

          find "$APP_PATH" -type d -name "*.appex" -print0 | while IFS= read -r -d '' E; do
            echo "  Signing appex: $E"
            codesign --force --sign "$IDENTITY" --entitlements Entitlements.plist --options runtime --timestamp=none "$E" || true
          done

          # sign main app
          echo "Signing main app: $APP_PATH"
          codesign --force --sign "$IDENTITY" --entitlements Entitlements.plist --options runtime --timestamp=none "$APP_PATH"

          echo "Verifying main app signature..."
          codesign -vvv --deep --strict "$APP_PATH" 2>&1 || true
          codesign -d --entitlements :- "$APP_PATH" || true
          spctl -a -t exec -vv "$APP_PATH" || true

          # Repack
          cd MyApp_unpack
          zip -qry ../SignedApp.ipa Payload
          cd ..
          echo "Signed IPA created at: $WORKDIR/SignedApp.ipa"
          ls -l "$WORKDIR/SignedApp.ipa"

      - name: Upload signed IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: SignedApp.ipa
          path: ${{ runner.temp }}/resign_workdir/SignedApp.ipa
